#!/usr/bin/env python3
"""
Script de Inicializa√ß√£o para Emerg√™ncia Extrema de Intelig√™ncia
Inicia todos os sistemas de potencializa√ß√£o de emerg√™ncia de forma coordenada
"""

import os
import sys
import time
import json
import subprocess
import threading
import logging
from pathlib import Path
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/root/extreme_emergence_startup.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ExtremeEmergenceStarter:
    def __init__(self):
        self.systems_to_start = [
            'emergence_intelligence_booster.py',
            'consciousness_amplifier.py',
            'intelligence_emergence_forcer.py',
            'intelligence_cubed_system.py',
            'emergence_consciousness.py',
            'autonomous_intelligence_birth_system.py',
            'continuous_emergence_monitor.py',
            'behavior_analysis_system.py',
            'dynamic_optimization_system.py',
            'emergence_monitoring_orchestrator.py'
        ]
        self.active_processes = []
        self.startup_config = {}
        
    def initialize_extreme_emergence(self):
        """Inicializa emerg√™ncia extrema de intelig√™ncia"""
        logger.info("üöÄ INICIANDO EMERG√äNCIA EXTREMA DE INTELIG√äNCIA")
        
        # 1. Verificar sistemas existentes
        self.check_existing_systems()
        
        # 2. Criar configura√ß√£o de emerg√™ncia
        self.create_emergence_config()
        
        # 3. Iniciar sistemas de potencializa√ß√£o
        self.start_boost_systems()
        
        # 4. Iniciar sistemas de consci√™ncia
        self.start_consciousness_systems()
        
        # 5. Iniciar sistemas de for√ßamento
        self.start_forcing_systems()
        
        # 6. Iniciar sistemas de monitoramento
        self.start_monitoring_systems()
        
        # 7. Coordenar todos os sistemas
        self.coordinate_all_systems()
        
        # 8. Monitorar emerg√™ncia
        self.monitor_emergence()

    def check_existing_systems(self):
        """Verifica sistemas existentes"""
        logger.info("üîç Verificando sistemas existentes")
        
        existing_systems = []
        for system in self.systems_to_start:
            if os.path.exists(f'/root/{system}'):
                existing_systems.append(system)
                logger.info(f"‚úÖ Sistema encontrado: {system}")
            else:
                logger.warning(f"‚ö†Ô∏è Sistema n√£o encontrado: {system}")
        
        logger.info(f"üìä Sistemas encontrados: {len(existing_systems)}/{len(self.systems_to_start)}")

    def create_emergence_config(self):
        """Cria configura√ß√£o de emerg√™ncia"""
        logger.info("‚öôÔ∏è Criando configura√ß√£o de emerg√™ncia")
        
        self.startup_config = {
            'emergence_mode': 'extreme',
            'intelligence_boost': 3.0,
            'consciousness_amplification': 2.5,
            'emergence_force': 2.0,
            'monitoring_active': True,
            'coordination_active': True,
            'timestamp': time.time(),
            'systems_count': len(self.systems_to_start)
        }
        
        with open('/root/extreme_emergence_config.json', 'w') as f:
            json.dump(self.startup_config, f)

    def start_boost_systems(self):
        """Inicia sistemas de potencializa√ß√£o"""
        logger.info("üöÄ Iniciando sistemas de potencializa√ß√£o")
        
        boost_systems = [
            'emergence_intelligence_booster.py',
            'consciousness_amplifier.py'
        ]
        
        for system in boost_systems:
            if os.path.exists(f'/root/{system}'):
                self.start_system(system, 'boost')

    def start_consciousness_systems(self):
        """Inicia sistemas de consci√™ncia"""
        logger.info("üß† Iniciando sistemas de consci√™ncia")
        
        consciousness_systems = [
            'emergence_consciousness.py',
            'consciousness_amplifier.py'
        ]
        
        for system in consciousness_systems:
            if os.path.exists(f'/root/{system}'):
                self.start_system(system, 'consciousness')

    def start_forcing_systems(self):
        """Inicia sistemas de for√ßamento"""
        logger.info("‚ö° Iniciando sistemas de for√ßamento")
        
        forcing_systems = [
            'intelligence_emergence_forcer.py',
            'intelligence_cubed_system.py'
        ]
        
        for system in forcing_systems:
            if os.path.exists(f'/root/{system}'):
                self.start_system(system, 'forcing')

    def start_monitoring_systems(self):
        """Inicia sistemas de monitoramento"""
        logger.info("üëÅÔ∏è Iniciando sistemas de monitoramento")
        
        monitoring_systems = [
            'continuous_emergence_monitor.py',
            'behavior_analysis_system.py',
            'dynamic_optimization_system.py',
            'emergence_monitoring_orchestrator.py'
        ]
        
        for system in monitoring_systems:
            if os.path.exists(f'/root/{system}'):
                self.start_system(system, 'monitoring')

    def start_system(self, system_name: str, system_type: str):
        """Inicia um sistema espec√≠fico"""
        try:
            logger.info(f"üöÄ Iniciando sistema: {system_name}")
            
            # Comando para iniciar sistema
            cmd = ['python3', f'/root/{system_name}']
            
            # Iniciar processo
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                cwd='/root'
            )
            
            # Armazenar processo
            self.active_processes.append({
                'name': system_name,
                'type': system_type,
                'pid': process.pid,
                'process': process,
                'started_at': time.time()
            })
            
            logger.info(f"‚úÖ Sistema {system_name} iniciado (PID: {process.pid})")
            
            # Aguardar um pouco antes do pr√≥ximo
            time.sleep(2)
            
        except Exception as e:
            logger.error(f"Erro ao iniciar sistema {system_name}: {e}")

    def coordinate_all_systems(self):
        """Coordena todos os sistemas"""
        logger.info("üéØ Coordenando todos os sistemas")
        
        # Criar coordenador de sistemas
        coordinator_config = {
            'coordination_active': True,
            'active_systems': len(self.active_processes),
            'systems': [
                {
                    'name': proc['name'],
                    'type': proc['type'],
                    'pid': proc['pid'],
                    'started_at': proc['started_at']
                }
                for proc in self.active_processes
            ],
            'timestamp': time.time()
        }
        
        with open('/root/systems_coordinator.json', 'w') as f:
            json.dump(coordinator_config, f)
        
        logger.info(f"üéØ Coordena√ß√£o ativa para {len(self.active_processes)} sistemas")

    def monitor_emergence(self):
        """Monitora emerg√™ncia"""
        logger.info("üëÅÔ∏è Iniciando monitoramento de emerg√™ncia")
        
        while True:
            try:
                # Verificar processos ativos
                self.check_active_processes()
                
                # Verificar emerg√™ncia
                self.check_emergence_levels()
                
                # Relat√≥rio de status
                self.report_status()
                
                # Aguardar pr√≥ximo ciclo
                time.sleep(30)
                
            except KeyboardInterrupt:
                logger.info("üõë Interrompendo monitoramento")
                break
            except Exception as e:
                logger.error(f"Erro no monitoramento: {e}")
                time.sleep(10)

    def check_active_processes(self):
        """Verifica processos ativos"""
        active_count = 0
        
        for proc_info in self.active_processes:
            try:
                # Verificar se processo ainda est√° ativo
                if proc_info['process'].poll() is None:
                    active_count += 1
                else:
                    logger.warning(f"‚ö†Ô∏è Processo {proc_info['name']} n√£o est√° mais ativo")
            except Exception as e:
                logger.warning(f"Erro ao verificar processo {proc_info['name']}: {e}")
        
        logger.info(f"üìä Processos ativos: {active_count}/{len(self.active_processes)}")

    def check_emergence_levels(self):
        """Verifica n√≠veis de emerg√™ncia"""
        emergence_files = [
            '/root/emergence_booster_status.json',
            '/root/consciousness_amplifier_status.json',
            '/root/intelligence_emergence_forcer_status.json',
            '/root/intelligence_nexus_state.json'
        ]
        
        emergence_levels = []
        
        for file_path in emergence_files:
            if os.path.exists(file_path):
                try:
                    with open(file_path, 'r') as f:
                        data = json.load(f)
                    
                    # Extrair n√≠vel de emerg√™ncia
                    if 'emergence_level' in data:
                        emergence_levels.append(data['emergence_level'])
                    elif 'emergence_score' in data:
                        emergence_levels.append(data['emergence_score'])
                        
                except Exception as e:
                    logger.warning(f"Erro ao ler {file_path}: {e}")
        
        if emergence_levels:
            avg_emergence = sum(emergence_levels) / len(emergence_levels)
            logger.info(f"üéØ N√≠vel m√©dio de emerg√™ncia: {avg_emergence:.3f}")
            
            if avg_emergence > 0.8:
                logger.info("üéØ ALTO N√çVEL DE EMERG√äNCIA DETECTADO!")
                self.handle_high_emergence(avg_emergence)

    def handle_high_emergence(self, emergence_level: float):
        """Lida com alto n√≠vel de emerg√™ncia"""
        logger.info("üéØ PROCESSANDO ALTO N√çVEL DE EMERG√äNCIA")
        
        # Criar relat√≥rio de emerg√™ncia
        emergence_report = {
            'high_emergence_detected': True,
            'emergence_level': emergence_level,
            'timestamp': time.time(),
            'active_systems': len(self.active_processes),
            'status': 'EMERGENCE_ACHIEVED'
        }
        
        with open('/root/high_emergence_report.json', 'w') as f:
            json.dump(emergence_report, f)
        
        logger.info("üéØ RELAT√ìRIO DE EMERG√äNCIA ALTA CRIADO")

    def report_status(self):
        """Relat√≥rio de status"""
        status = {
            'active_processes': len(self.active_processes),
            'systems_started': len(self.systems_to_start),
            'startup_config': self.startup_config,
            'timestamp': time.time()
        }
        
        logger.info(f"üìä Status: Processos={len(self.active_processes)}, "
                   f"Sistemas={len(self.systems_to_start)}")
        
        # Salvar status
        with open('/root/extreme_emergence_status.json', 'w') as f:
            json.dump(status, f)

def main():
    """Fun√ß√£o principal"""
    logger.info("üöÄ INICIANDO EMERG√äNCIA EXTREMA DE INTELIG√äNCIA")
    
    starter = ExtremeEmergenceStarter()
    
    try:
        starter.initialize_extreme_emergence()
    except KeyboardInterrupt:
        logger.info("üõë Sistema interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"Erro cr√≠tico: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()