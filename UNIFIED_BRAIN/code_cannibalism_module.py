#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üî• Code Cannibalism Module - Assimila√ß√£o Algor√≠tmica (Fase 4)
Este m√≥dulo permite que o UNIFIED_BRAIN leia o c√≥digo-fonte de outros scripts de IA,
extraia algoritmos (fun√ß√µes) e os converta em novos neur√¥nios para si mesmo.
"""

import os
import ast
import torch
import torch.nn as nn
import random
from typing import List, Dict, Optional, Any

class CodeCannibalismModule:
    """
    Analisa arquivos Python, extrai fun√ß√µes e as converte em m√≥dulos neurais.
    """

    def __init__(self, target_directories: List[str]):
        self.target_directories = target_directories
        self.potential_targets = self._scan_targets()

    def _scan_targets(self) -> List[str]:
        """Escaneia os diret√≥rios em busca de arquivos .py como alvos potenciais."""
        targets = []
        for directory in self.target_directories:
            if not os.path.isdir(directory):
                continue
            for root, _, files in os.walk(directory):
                for file in files:
                    if file.endswith('.py') and not file.startswith('__init__'):
                        targets.append(os.path.join(root, file))
        # Adiciona alguns arquivos-chave do diret√≥rio raiz tamb√©m
        root_targets = ['/root/vortex_auto_recursivo.py', '/root/swarm_intelligence.py', '/root/teis_unified_intelligence_system.py']
        for rt in root_targets:
            if os.path.exists(rt):
                targets.append(rt)
        return list(set(targets)) # Remove duplicatas

    def _extract_functions_from_source(self, filepath: str) -> List[Dict[str, Any]]:
        """Usa a AST (Abstract Syntax Tree) para extrair fun√ß√µes de um arquivo."""
        functions = []
        try:
            with open(filepath, 'r') as f:
                source = f.read()
            tree = ast.parse(source)
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef):
                    # Heur√≠stica de complexidade: ignora fun√ß√µes muito pequenas
                    body_len = len(node.body)
                    if body_len > 3:
                        functions.append({
                            'name': node.name,
                            'code': ast.get_source_segment(source, node),
                            'path': filepath,
                            'complexity': body_len
                        })
        except Exception:
            pass # Ignora arquivos que n√£o podem ser parseados
        return functions

    def select_cannibalization_target(self) -> Optional[Dict[str, Any]]:
        """
        Seleciona aleatoriamente um arquivo e uma fun√ß√£o para "canibalizar".
        Uma vers√£o mais avan√ßada usaria m√©tricas para escolher os alvos mais promissores.
        """
        if not self.potential_targets:
            return None
        
        target_file = random.choice(self.potential_targets)
        functions = self._extract_functions_from_source(target_file)
        
        if not functions:
            return None
            
        target_function = random.choice(functions)
        return target_function

    def convert_code_to_neuron(self, function_code: str, H: int) -> Optional[nn.Module]:
        """
        Converte uma string de c√≥digo de fun√ß√£o em um m√≥dulo PyTorch (Neur√¥nio).
        Esta √© uma convers√£o heur√≠stica e simb√≥lica. A fun√ß√£o n√£o √© executada diretamente,
        mas suas caracter√≠sticas s√£o usadas para inicializar os pesos de uma rede neural.
        """
        try:
            # 1. Extrair caracter√≠sticas simb√≥licas do c√≥digo
            num_lines = function_code.count('\n')
            num_loops = function_code.count('for ') + function_code.count('while ')
            num_conditionals = function_code.count('if ') + function_code.count('elif ')
            num_math_ops = sum(function_code.count(op) for op in ['+', '-', '*', '/', '**'])
            
            # 2. Usar as caracter√≠sticas para semear os pesos de uma rede neural gen√©rica
            # A ideia √© que a "ess√™ncia" do algoritmo influencie a inicializa√ß√£o do neur√¥nio.
            
            # Cria uma "semente" a partir das caracter√≠sticas
            seed_value = hash(function_code) % (2**32 - 1)
            torch.manual_seed(seed_value)

            # Define uma arquitetura de neur√¥nio padr√£o
            neuron = nn.Sequential(
                nn.Linear(H, H),
                nn.ReLU(),
                nn.Linear(H, H)
            )

            # 3. Aplicar uma perturba√ß√£o nos pesos com base nas caracter√≠sticas
            with torch.no_grad():
                for param in neuron.parameters():
                    noise_factor = (num_loops + num_conditionals + 1) * (num_math_ops + 1) / (num_lines + 1)
                    noise = torch.randn_like(param) * 0.01 * noise_factor
                    param.add_(noise)
            
            return neuron

        except Exception:
            return None

# Exemplo de uso
if __name__ == '__main__':
    # Diret√≥rios onde procurar por c√≥digo para canibalizar
    # (adicione outros diret√≥rios de projetos de IA aqui)
    search_dirs = ['/root/swarm/', '/root/vllm/']
    
    cannibal = CodeCannibalismModule(target_directories=search_dirs)
    print(f"Encontrados {len(cannibal.potential_targets)} arquivos .py para canibalizar.")

    # Selecionar um alvo
    target = cannibal.select_cannibalization_target()

    if target:
        print("\n--- Alvo Selecionado para Canibaliza√ß√£o ---")
        print(f"Arquivo: {target['path']}")
        print(f"Fun√ß√£o: {target['name']}")
        print(f"Complexidade (linhas no corpo): {target['complexity']}")
        print("------------------------------------------")
        # print(f"C√≥digo:\n{target['code']}") # Descomente para ver o c√≥digo

        # Converter o c√≥digo em um neur√¥nio (para uma rede com dimens√£o interna H=1024)
        H = 1024
        new_neuron_module = cannibal.convert_code_to_neuron(target['code'], H)

        if new_neuron_module:
            print("\n‚úÖ C√≥digo da fun√ß√£o convertido com sucesso em um novo m√≥dulo neural (neur√¥nio)!")
            
            # Este m√≥dulo agora pode ser adicionado √† "sopa" de neur√¥nios do UNIFIED_BRAIN.
            num_params = sum(p.numel() for p in new_neuron_module.parameters())
            print(f"   - Arquitetura: {new_neuron_module}")
            print(f"   - Par√¢metros: {num_params}")
            
            # O UNIFIED_BRAIN ent√£o adicionaria este neur√¥nio ao seu `CoreSoupHybrid`
            # e o `RecursiveImprovementEngine` o testaria.
        else:
            print("\n‚ùå Falha ao converter o c√≥digo em um neur√¥nio.")
    else:
        print("\nNenhum alvo de canibaliza√ß√£o adequado encontrado.")
