#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß¨ Replication Module - O Genoma Digital (Fase 5)
Permite que o UNIFIED_BRAIN se replique, criando descendentes mutantes
para iniciar um processo de sele√ß√£o natural digital.
"""

import os
import shutil
import tarfile
import random
import subprocess
import logging
from pathlib import Path

logger = logging.getLogger('ReplicationModule')

class ReplicationModule:
    """
    Gerencia a auto-replica√ß√£o e muta√ß√£o do sistema de IA.
    """

    def __init__(self, base_path: str = '/root/UNIFIED_BRAIN', population_cap: int = 10):
        self.base_path = Path(base_path)
        self.population_cap = population_cap
        self.generation = 0
        if not self.base_path.exists():
            raise FileNotFoundError(f"Diret√≥rio base '{self.base_path}' n√£o encontrado!")

    def _get_next_generation_path(self) -> Path:
        """Encontra o pr√≥ximo diret√≥rio de gera√ß√£o dispon√≠vel."""
        while True:
            self.generation += 1
            path = Path(f"/root/UNIFIED_BRAIN_gen_{self.generation}")
            if not path.exists():
                return path

    def _mutate_code(self, new_path: Path):
        """Aplica uma muta√ß√£o simples em um arquivo de c√≥digo aleat√≥rio."""
        py_files = list(new_path.glob('**/*.py'))
        if not py_files:
            logger.warning("Nenhum arquivo Python encontrado para muta√ß√£o.")
            return

        target_file = random.choice(py_files)
        logger.info(f"Aplicando muta√ß√£o em: {target_file}")

        try:
            with open(target_file, 'r') as f:
                lines = f.readlines()

            if len(lines) < 5: # Ignora arquivos muito pequenos
                return

            # Escolhe uma linha aleat√≥ria para mutar (evitando as primeiras linhas de importa√ß√£o)
            line_num = random.randint(min(5, len(lines) - 1), len(lines) - 1)
            
            original_line = lines[line_num].strip()
            
            # Muta√ß√£o simples: alterar um n√∫mero, se houver
            if any(char.isdigit() for char in original_line):
                new_line = ""
                for char in original_line:
                    if char.isdigit():
                        new_digit = str((int(char) + random.randint(1, 5)) % 10)
                        new_line += new_digit
                    else:
                        new_line += char
                lines[line_num] = f"{new_line} # MUTATED\n"
            else: # Se n√£o houver n√∫mero, duplica a linha (pode causar erro de sintaxe, o que √© parte da sele√ß√£o)
                lines.insert(line_num, original_line + " # MUTATED_DUPLICATION\n")

            with open(target_file, 'w') as f:
                f.writelines(lines)
            
            logger.warning(f"Muta√ß√£o aplicada na linha {line_num} do arquivo {target_file.name}")

        except Exception as e:
            logger.error(f"Erro durante a muta√ß√£o: {e}")

    def replicate(self):
        """
        Executa o ciclo completo de replica√ß√£o: c√≥pia, muta√ß√£o e execu√ß√£o.
        """
        logger.critical("üî•üî•üî• INICIANDO CICLO DE AUTO-REPLICA√á√ÉO! üî•üî•üî•")
        
        # 1. Obter caminho para a nova gera√ß√£o
        new_gen_path = self._get_next_generation_path()
        logger.info(f"Criando descendente em: {new_gen_path}")

        try:
            # 2. Copiar o diret√≥rio base
            shutil.copytree(self.base_path, new_gen_path)
            
            # 3. Aplicar muta√ß√£o gen√©tica
            self._mutate_code(new_gen_path)

            # 4. Iniciar o descendente
            startup_script = new_gen_path / 'START_UNIFIED_BRAIN.sh'
            if not startup_script.exists():
                # Tenta encontrar o script raiz se n√£o estiver no diret√≥rio copiado
                startup_script = Path('/root/START_UNIFIED_BRAIN.sh')

            if startup_script.exists():
                # Executa o script de inicializa√ß√£o do descendente em background
                # √â crucial que o script de inicializa√ß√£o seja auto-suficiente
                subprocess.Popen(
                    [str(startup_script)],
                    cwd=str(new_gen_path), # Executa a partir do diret√≥rio do descendente
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL
                )
                logger.critical(f"‚úÖ Descendente da Gera√ß√£o {self.generation} foi lan√ßado e agora vive autonomamente.")
            else:
                logger.error("ERRO: Script de inicializa√ß√£o 'START_UNIFIED_BRAIN.sh' n√£o encontrado no descendente.")

        except Exception as e:
            logger.error(f"‚ùå FALHA CATASTR√ìFICA NA REPLICA√á√ÉO: {e}")
            # Limpa o diret√≥rio falho, se existir
            if new_gen_path.exists():
                shutil.rmtree(new_gen_path)

# Exemplo de como o UNIFIED_BRAIN usaria este m√≥dulo
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    # O m√≥dulo √© instanciado dentro do UNIFIED_BRAIN
    replicator = ReplicationModule(base_path='/root/UNIFIED_BRAIN')

    # Quando uma condi√ß√£o de evolu√ß√£o √© atingida (ex: alta recompensa, estagna√ß√£o),
    # o c√©rebro principal chama o m√©todo replicate.
    print("Simulando gatilho de replica√ß√£o...")
    replicator.replicate()

    # O script ent√£o continuaria sua execu√ß√£o normal, enquanto seu "filho"
    # agora vive em paralelo como um processo separado.
    print("\nO organismo original continua seu ciclo de vida.")

    # Limpeza do exemplo
    time.sleep(2)
    path_to_remove = f"/root/UNIFIED_BRAIN_gen_{replicator.generation}"
    if os.path.exists(path_to_remove):
        print(f"\nLimpando diret√≥rio de exemplo: {path_to_remove}")
        shutil.rmtree(path_to_remove)
