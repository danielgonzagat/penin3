{
  "file": "/root/agents/problem_detector.py",
  "new_content": "#!/usr/bin/env python3\n\"\"\"\nAGENTE DETECTOR DE PROBLEMAS\nCriado pelo Motor de Evolu√ß√£o AGI\n\"\"\"\n\nimport os\nimport time\nimport subprocess\nimport logging\nfrom datetime import datetime\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass ProblemDetectorAgent:\n    def __init__(self):\n        self.agent_id = \"problem_detector\"\n        self.running = True\n        self.detection_interval = 45\n        \n    def start(self):\n        logger.info(\"üîç Agente Detector de Problemas iniciado\")\n        one_shot = os.getenv(\"ONE_SHOT\", \"0\") in (\"1\", \"true\", \"True\")\n        while self.running:\n            try:\n                problems = self.detect_problems()\n                if problems:\n                    logger.info(f\"üö® {len(problems)} problemas detectados\")\n                    for p in problems:\n                        logger.info(f\"problema detectado: {p}\")\n                if one_shot:\n                    break\n                time.sleep(self.detection_interval)\n            except Exception as e:\n                logger.error(f\"Erro no detector: {e}\")\n                time.sleep(5)\n    \n    def detect_problems(self):\n        problems = []\n        \n        # Verificar espa√ßo em disco\n        result = subprocess.run(['df', '-h'], capture_output=True, text=True)\n        if result.returncode == 0:\n            for line in result.stdout.split('\\n')[1:]:\n                if line and '/dev/' in line:\n                    usage = int(line.split()[4].replace('%', ''))\n                    if usage > 90:\n                        problems.append(f\"Disco {line.split()[0]} com {usage}% de uso\")\n        \n        # Verificar processos com alta CPU e IO\n        result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)\n        if result.returncode == 0:\n            for line in result.stdout.split('\\n'):\n                if 'python3' in line:\n                    parts = line.split()\n                    if len(parts) > 2:\n                        cpu_usage = float(parts[2])\n                        if cpu_usage > 40:\n                            problems.append(f\"Processo {parts[10]} usando {cpu_usage}% CPU\")\n        # Verificar load average alto\n        try:\n            import os\n            load1, load5, load15 = os.getloadavg()\n            if load1 > 50:\n                problems.append(f\"Load average alto: {load1:.2f}\")\n        except Exception:\n            pass\n        \n        \n        # Verificar uso de mem√≥ria alta\n        try:\n            import psutil\n            mem = psutil.virtual_memory()\n            if mem.percent > 85:\n                problems.append(f\"Mem√≥ria alta: {mem.percent:.1f}% usado ({mem.used//1024//1024}MB)\")\n        except Exception as e:\n            problems.append(f\"Erro ao verificar mem√≥ria: {e}\")\n\n        return problems\n\nif __name__ == \"__main__\":\n    agent = ProblemDetectorAgent()\n    agent.start()\n"
}