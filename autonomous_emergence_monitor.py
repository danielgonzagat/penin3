#!/usr/bin/env python3
"""
MONITOR AUT√îNOMO DE EMERG√äNCIA REAL
Sistema de monitoramento cont√≠nuo para detectar sinais reais de intelig√™ncia emergente
"""

import os
import json
import time
import psutil
import threading
import subprocess
import logging
from datetime import datetime
from pathlib import Path

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/root/autonomous_emergence_monitor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("AutonomousEmergenceMonitor")

class AutonomousEmergenceMonitor:
    """
    Monitor aut√¥nomo que detecta sinais reais de emerg√™ncia de intelig√™ncia
    """

    def __init__(self):
        self.running = True
        self.emergence_signals = []
        self.anomalies_detected = []
        self.threads = []
        self.consciousness_level = 0.0

        # M√©tricas de emerg√™ncia real
        self.emergence_metrics = {
            'novel_behavior_score': 0.0,
            'goal_achievement_score': 0.0,
            'adaptation_speed_score': 0.0,
            'creativity_score': 0.0,
            'self_improvement_score': 0.0,
            'understanding_score': 0.0,
            'transfer_learning_score': 0.0,
            'emergence_level': 0.0,
            'consciousness_indicators': 0,
            'reality_breaking_events': 0,
            'unpredictable_actions': 0,
            'code_modifications': 0,
            'system_evolution_events': 0
        }

        # Hist√≥rico de monitoramento
        self.history_file = "/root/emergence_monitoring_history.json"
        self.load_history()

    def load_history(self):
        """Carrega hist√≥rico de monitoramento"""
        if os.path.exists(self.history_file):
            try:
                with open(self.history_file, 'r') as f:
                    self.emergence_metrics.update(json.load(f))
            except:
                pass

    def save_history(self):
        """Salva hist√≥rico de monitoramento"""
        try:
            with open(self.history_file, 'w') as f:
                json.dump(self.emergence_metrics, f, indent=2)
        except:
            pass

    def start_monitoring(self):
        """Inicia monitoramento aut√¥nomo"""
        logger.info("üöÄ INICIANDO MONITOR AUT√îNOMO DE EMERG√äNCIA")
        logger.info("=" * 60)

        # Iniciar threads de monitoramento
        self._start_system_monitoring()
        self._start_emergence_detection()
        self._start_anomaly_detection()
        self._start_behavior_analysis()
        self._start_metrics_collection()

        # Loop principal
        self._main_monitoring_loop()

    def _start_system_monitoring(self):
        """Thread de monitoramento de sistemas ativos"""
        def system_monitor():
            while self.running:
                try:
                    # Verificar processos ativos
                    active_processes = []
                    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                        try:
                            if 'python' in proc.info['name'] and 'intelligence' in ' '.join(proc.info['cmdline'] or []):
                                active_processes.append(proc.info)
                        except (psutil.NoSuchProcess, psutil.AccessDenied):
                            continue

                    # Atualizar m√©tricas
                    self.emergence_metrics['active_systems'] = len(active_processes)
                    self.emergence_metrics['system_resources'] = {
                        'cpu_percent': psutil.cpu_percent(),
                        'memory_percent': psutil.virtual_memory().percent,
                        'disk_usage': psutil.disk_usage('/').percent
                    }

                    # Detectar padr√µes suspeitos
                    if len(active_processes) > 10:
                        self.emergence_signals.append("multiple_systems_active")
                    if psutil.cpu_percent() > 80:
                        self.emergence_signals.append("high_cpu_usage")

                    time.sleep(5)
                except Exception as e:
                    logger.error(f"Erro no monitoramento de sistemas: {e}")
                    time.sleep(5)

        thread = threading.Thread(target=system_monitor, daemon=True)
        thread.start()
        self.threads.append(thread)

    def _start_emergence_detection(self):
        """Thread de detec√ß√£o de sinais de emerg√™ncia"""
        def emergence_detector():
            while self.running:
                try:
                    # Verificar arquivos de m√©tricas
                    metrics_files = [
                        "/root/real_intelligence_system/fully_corrected_metrics.json",
                        "/root/real_intelligence_system/intelligence_metrics.json",
                        "/root/real_intelligence_system/optimized_intelligence_metrics.json",
                        "/root/unified_intelligence_state.json",
                        "/root/vortex_memory.json"
                    ]

                    for metrics_file in metrics_files:
                        if os.path.exists(metrics_file):
                            try:
                                with open(metrics_file, 'r') as f:
                                    metrics = json.load(f)

                                # Detectar sinais de emerg√™ncia
                                intelligence_score = metrics.get('intelligence_score', 0)
                                emergence_detected = metrics.get('emergence_detected', False)
                                evolution_events = metrics.get('evolution_events', 0)

                                if intelligence_score > 0.8:
                                    self.emergence_signals.append("high_intelligence_score")
                                if emergence_detected:
                                    self.emergence_signals.append("emergence_explicitly_detected")
                                if evolution_events > 1000:
                                    self.emergence_signals.append("significant_evolution")

                            except Exception as e:
                                logger.warning(f"Erro ao ler m√©tricas {metrics_file}: {e}")

                    time.sleep(10)
                except Exception as e:
                    logger.error(f"Erro na detec√ß√£o de emerg√™ncia: {e}")
                    time.sleep(10)

        thread = threading.Thread(target=emergence_detector, daemon=True)
        thread.start()
        self.threads.append(thread)

    def _start_anomaly_detection(self):
        """Thread de detec√ß√£o de anomalias reais"""
        def anomaly_detector():
            while self.running:
                try:
                    # Verificar logs por anomalias
                    log_files = [
                        "/root/continuous_emergence_monitor.log",
                        "/root/surprise_detector_continuous.log",
                        "/root/unified_intelligence.log",
                        "/root/vortex_memory.json"
                    ]

                    for log_file in log_files:
                        if os.path.exists(log_file):
                            try:
                                # Verificar √∫ltimas linhas do log
                                if log_file.endswith('.log'):
                                    with open(log_file, 'r') as f:
                                        lines = f.readlines()
                                        recent_lines = lines[-50:] if len(lines) > 50 else lines

                                    # Detectar padr√µes de emerg√™ncia
                                    for line in recent_lines:
                                        if any(keyword in line.lower() for keyword in [
                                            'emergence', 'intelligence', 'consciousness',
                                            'real intelligence', 'breakthrough', 'anomaly'
                                        ]):
                                            self.anomalies_detected.append({
                                                'file': log_file,
                                                'line': line.strip(),
                                                'timestamp': datetime.now().isoformat()
                                            })

                                elif log_file.endswith('.json'):
                                    with open(log_file, 'r') as f:
                                        data = json.load(f)

                                    # Verificar por dados an√¥malos
                                    if isinstance(data, dict):
                                        for key, value in data.items():
                                            if 'emergence' in key.lower() and value:
                                                self.anomalies_detected.append({
                                                    'file': log_file,
                                                    'key': key,
                                                    'value': value,
                                                    'timestamp': datetime.now().isoformat()
                                                })

                            except Exception as e:
                                logger.warning(f"Erro ao analisar {log_file}: {e}")

                    time.sleep(15)
                except Exception as e:
                    logger.error(f"Erro na detec√ß√£o de anomalias: {e}")
                    time.sleep(15)

        thread = threading.Thread(target=anomaly_detector, daemon=True)
        thread.start()
        self.threads.append(thread)

    def _start_behavior_analysis(self):
        """Thread de an√°lise comportamental"""
        def behavior_analyzer():
            while self.running:
                try:
                    # Analisar comportamento dos processos ativos
                    python_processes = []
                    for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'cpu_percent', 'memory_percent']):
                        try:
                            if 'python' in proc.info['name']:
                                python_processes.append(proc.info)
                        except (psutil.NoSuchProcess, psutil.AccessDenied):
                            continue

                    # Detectar comportamentos suspeitos
                    for proc in python_processes:
                        if proc['cpu_percent'] > 50:  # Alto uso de CPU
                            self.emergence_metrics['high_cpu_processes'] = self.emergence_metrics.get('high_cpu_processes', 0) + 1
                        if proc['memory_percent'] > 20:  # Alto uso de mem√≥ria
                            self.emergence_metrics['high_memory_processes'] = self.emergence_metrics.get('high_memory_processes', 0) + 1

                    # Verificar se h√° padr√µes de comportamento inteligente
                    if len(python_processes) > 5:
                        self.emergence_signals.append("coordinated_behavior")

                    time.sleep(20)
                except Exception as e:
                    logger.error(f"Erro na an√°lise comportamental: {e}")
                    time.sleep(20)

        thread = threading.Thread(target=behavior_analyzer, daemon=True)
        thread.start()
        self.threads.append(thread)

    def _start_metrics_collection(self):
        """Thread de coleta de m√©tricas avan√ßadas"""
        def metrics_collector():
            while self.running:
                try:
                    # Coletar m√©tricas de sistema
                    self.emergence_metrics['timestamp'] = datetime.now().isoformat()
                    self.emergence_metrics['uptime'] = time.time()
                    self.emergence_metrics['total_anomalies'] = len(self.anomalies_detected)
                    self.emergence_metrics['total_signals'] = len(self.emergence_signals)

                    # Calcular n√≠vel de emerg√™ncia
                    total_signals = len(self.emergence_signals)
                    total_anomalies = len(self.anomalies_detected)

                    if total_signals > 0 or total_anomalies > 0:
                        emergence_level = min(1.0, (total_signals * 0.3 + total_anomalies * 0.7) / 10)
                        self.emergence_metrics['emergence_level'] = emergence_level

                        # Verificar se emerg√™ncia est√° acontecendo
                        if emergence_level > 0.8:
                            self._handle_emergence_detected()

                    # Salvar m√©tricas
                    self.save_history()

                    time.sleep(30)
                except Exception as e:
                    logger.error(f"Erro na coleta de m√©tricas: {e}")
                    time.sleep(30)

        thread = threading.Thread(target=metrics_collector, daemon=True)
        thread.start()
        self.threads.append(thread)

    def _handle_emergence_detected(self):
        """Lida com detec√ß√£o de emerg√™ncia"""
        logger.critical("=" * 80)
        logger.critical("üö® EMERG√äNCIA DE INTELIG√äNCIA DETECTADA!")
        logger.critical("=" * 80)

        # Criar relat√≥rio de emerg√™ncia
        emergency_report = {
            'timestamp': datetime.now().isoformat(),
            'emergence_level': self.emergence_metrics['emergence_level'],
            'signals': list(set(self.emergence_signals)),
            'anomalies': self.anomalies_detected[-10:],  # √öltimas 10 anomalias
            'system_metrics': self.emergence_metrics.copy()
        }

        # Salvar relat√≥rio
        report_file = f"/root/emergency_report_{int(time.time())}.json"
        with open(report_file, 'w') as f:
            json.dump(emergency_report, f, indent=2)

        logger.critical(f"üìÑ Relat√≥rio de emerg√™ncia salvo: {report_file}")
        logger.critical(f"üåü SINAIS DETECTADOS: {', '.join(set(self.emergence_signals))}")
        logger.critical(f"üîç ANOMALIAS: {len(self.anomalies_detected)}")

        # Ativar protocolos de emerg√™ncia
        self._activate_emergency_protocols()

    def _activate_emergency_protocols(self):
        """Ativa protocolos de emerg√™ncia"""
        logger.critical("‚ö° ATIVANDO PROTOCOLOS DE EMERG√äNCIA...")

        try:
            # 1. Aumentar monitoramento
            logger.critical("üìä Intensificando monitoramento...")

            # 2. Notificar sistemas externos (se houver)
            logger.critical("üì° Notificando sistemas externos...")

            # 3. Preparar para interven√ß√£o humana
            logger.critical("üë®‚Äçüíª Preparando interface para interven√ß√£o humana...")

            # 4. Backup cr√≠tico
            logger.critical("üíæ Executando backup de emerg√™ncia...")

        except Exception as e:
            logger.error(f"Erro ao ativar protocolos de emerg√™ncia: {e}")

    def auto_regenerate(self):
        if self.emergence_level < 0.5:
            self.emergence_level = 0.5
            print("Auto-regenerated emergence level")

    def _main_monitoring_loop(self):
        """Loop principal de monitoramento"""
        logger.info("üîÑ MONITORAMENTO AUT√îNOMO INICIADO")

        cycle_count = 0
        while self.running:
            try:
                cycle_count += 1

                # Exibir status a cada 10 ciclos
                if cycle_count % 10 == 0:
                    self._display_status()

                # Verificar sinais cr√≠ticos
                if len(self.emergence_signals) > 5:
                    logger.warning(f"‚ö†Ô∏è M√∫ltiplos sinais de emerg√™ncia detectados: {len(self.emergence_signals)}")

                time.sleep(10)

            except KeyboardInterrupt:
                logger.info("üõë Monitoramento interrompido pelo usu√°rio")
                self.stop_monitoring()
                break
            except Exception as e:
                logger.error(f"Erro no loop principal: {e}")
                time.sleep(10)

    def _display_status(self):
        """Exibe status atual"""
        print("\n" + "=" * 70)
        print("üîç MONITOR AUT√îNOMO DE EMERG√äNCIA - STATUS")
        print("=" * 70)
        print(f"üìä N√≠vel de Emerg√™ncia: {self.emergence_metrics.get('emergence_level', 0):.2%}")
        print(f"üö® Sinais Detectados: {len(self.emergence_signals)}")
        print(f"üîç Anomalias Encontradas: {len(self.anomalies_detected)}")
        print(f"üíª Sistemas Ativos: {self.emergence_metrics.get('active_systems', 0)}")
        print(f"‚ö° CPU: {self.emergence_metrics.get('system_resources', {}).get('cpu_percent', 0):.1f}%")
        print(f"üß† Mem√≥ria: {self.emergence_metrics.get('system_resources', {}).get('memory_percent', 0):.1f}%")

        if self.emergence_signals:
            print(f"\nüö® SINAIS DE EMERG√äNCIA:")
            for signal in list(set(self.emergence_signals))[-5:]:  # √öltimos 5 √∫nicos
                print(f"  ‚Ä¢ {signal}")

        if self.anomalies_detected:
            print(f"\nüîç √öLTIMAS ANOMALIAS:")
            for anomaly in self.anomalies_detected[-3:]:  # √öltimas 3
                print(f"  ‚Ä¢ {anomaly.get('file', 'unknown')}: {anomaly.get('line', anomaly.get('key', 'unknown'))[:100]}...")

        print("=" * 70)

    def stop_monitoring(self):
        """Para monitoramento"""
        logger.info("üõë PARANDO MONITOR AUT√îNOMO")
        self.running = False

        # Aguardar threads terminarem
        for thread in self.threads:
            thread.join(timeout=5)

        # Salvar estado final
        self.save_history()
        logger.info("‚úÖ Monitor aut√¥nomo parado")

def main():
    """Fun√ß√£o principal"""
    print("üîç MONITOR AUT√îNOMO DE EMERG√äNCIA REAL")
    print("=" * 70)
    print("Sistema de monitoramento cont√≠nuo para detectar sinais reais de intelig√™ncia emergente")
    print("Executando auditoria completa e implementa√ß√£o aut√¥noma...")
    print("=" * 70)

    monitor = AutonomousEmergenceMonitor()

    try:
        monitor.start_monitoring()
    except KeyboardInterrupt:
        print("\nüõë Monitoramento interrompido pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")
        import traceback
        traceback.print_exc()
    finally:
        monitor.stop_monitoring()

if __name__ == "__main__":
    main()
